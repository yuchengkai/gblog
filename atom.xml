<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鱼的博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yck.me/"/>
  <updated>2016-05-15T14:23:53.648Z</updated>
  <id>http://yck.me/</id>
  
  <author>
    <name><![CDATA[YuChengkai]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[SSH使用key免密码登录]]></title>
    <link href="http://yck.me/2016/05/ssh-login-with-key/"/>
    <id>http://yck.me/2016/05/ssh-login-with-key/</id>
    <published>2016-05-12T13:36:01.000Z</published>
    <updated>2016-05-15T14:23:53.648Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="linux" scheme="http://yck.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cookie与Session的区别]]></title>
    <link href="http://yck.me/2016/05/cookie-and-session/"/>
    <id>http://yck.me/2016/05/cookie-and-session/</id>
    <published>2016-05-12T13:36:01.000Z</published>
    <updated>2016-05-19T07:58:10.868Z</updated>
    <content type="html"><![CDATA[<p>本文分别对Cookie与Session做一个介绍和总结，并分别对两个知识点进行对比分析，让大家对Cookie和Session有一个更深入的了解，并对自己的开发工作中灵活运用带来启示。</p>
<h2 id="cookie机制">cookie机制</h2><p>Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。IETF RFC 2965 HTTP State Management Mechanism 是通用cookie规范。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies 。<br><a id="more"></a><br>具体来说cookie机制采用的是在客户端保持状态的方案。它是在用户端的会话状态的存贮机制，他需要用户打开客户端的cookie支持。cookie的作用就是为了解决HTTP协议无状态的缺陷所作的努力。</p>
<p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p>
<p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</p>
<p>而session机制采用的是一种在服务器端保持状态的解决方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的。而session提供了方便管理全局变量的方式 。</p>
<p>session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器。</p>
<p>就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建议在服务器端的session机制更安全些，因为它不会任意读取客户存储的信息。</p>
<h2 id="session机制">session机制</h2><p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p>
<p>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。</p>
<p>保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。</p>
<p>经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。</p>
<h2 id="两者的差别">两者的差别</h2><p>Cookie与Session都能够进行会话跟踪，但是完成的原理不太一样。普通状况下二者均能够满足需求，但有时分不能够运用Cookie，有时分不能够运用Session。下面经过比拟阐明二者的特性以及适用的场所。</p>
<ol>
<li><p><strong>存取方式的不同</strong></p>
<p>Cookie中只能保管ASCII字符串，假如需求存取Unicode字符或者二进制数据，需求先进行编码。Cookie中也不能直接存取Java对象。若要存储略微复杂的信息，运用Cookie是比拟艰难的。</p>
<p>而Session中能够存取任何类型的数据，包括而不限于String、Integer、List、Map等。Session中也能够直接保管Java Bean乃至任何Java类，对象等，运用起来十分便当。能够把Session看做是一个Java容器类。</p>
</li>
<li><p><strong>隐私策略的不同</strong></p>
<p>Cookie存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。而Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。</p>
<p>假如选用Cookie，比较好的方法是，敏感的信息如账号密码等尽量不要写到Cookie中。最好是像Google、Baidu那样将Cookie信息加密，提交到服务器后再进行解密，保证Cookie中的信息只要本人能读得懂。而假如选择Session就省事多了，反正是放在服务器上，Session里任何隐私都能够有效的保护。</p>
</li>
<li><p><strong>有效期上的不同</strong></p>
<p>使用过Google的人都晓得，假如登录过Google，则Google的登录信息长期有效。用户不用每次访问都重新登录，Google会持久地记载该用户的登录信息。要到达这种效果，运用Cookie会是比较好的选择。只需要设置Cookie的过期时间属性为一个很大很大的数字。</p>
<p>由于Session依赖于名为JSESSIONID的Cookie，而Cookie JSESSIONID的过期时间默许为–1，只需关闭了阅读器该Session就会失效，因而Session不能完成信息永世有效的效果。运用URL地址重写也不能完成。而且假如设置Session的超时时间过长，服务器累计的Session就会越多，越容易招致内存溢出。</p>
</li>
<li><p><strong>服务器压力的不同</strong></p>
<p>Session是保管在服务器端的，每个用户都会产生一个Session。假如并发访问的用户十分多，会产生十分多的Session，耗费大量的内存。因而像Google、Baidu、Sina这样并发访问量极高的网站，是不太可能运用Session来追踪客户会话的。</p>
<p>而Cookie保管在客户端，不占用服务器资源。假如并发阅读的用户十分多，Cookie是很好的选择。关于Google、Baidu、Sina来说，Cookie或许是唯一的选择。</p>
</li>
<li><p><strong>浏览器支持的不同</strong></p>
<p>Cookie是需要客户端浏览器支持的。假如客户端禁用了Cookie，或者不支持Cookie，则会话跟踪会失效。关于WAP上的应用，常规的Cookie就派不上用场了。</p>
<p>假如客户端浏览器不支持Cookie，需要运用Session以及URL地址重写。需要注意的是一切的用到Session程序的URL都要进行URL地址重写，否则Session会话跟踪还会失效。关于WAP应用来说，Session+URL地址重写或许是它唯一的选择。</p>
<p>假如客户端支持Cookie，则Cookie既能够设为本浏览器窗口以及子窗口内有效（把过期时间设为–1），也能够设为一切阅读器窗口内有效（把过期时间设为某个大于0的整数）。但Session只能在本阅读器窗口以及其子窗口内有效。假如两个浏览器窗口互不相干，它们将运用两个不同的Session。（IE8下不同窗口Session相干）</p>
</li>
<li><p><strong>跨域支持上的不同</strong></p>
<p>Cookie支持跨域名访问，例如将domain属性设置为“.biaodianfu.com”，则以“.biaodianfu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中，例如Google、Baidu、Sina等。而Session则不会支持跨域名访问。Session仅在他所在的域名内有效。</p>
</li>
</ol>
<p>仅运用Cookie或者仅运用Session可能完成不了理想的效果。这时应该尝试一下同时运用Cookie与Session。Cookie与Session的搭配运用在实践项目中会完成很多意想不到的效果。</p>
<blockquote>
<p>作者：kelinlin<br>转载自：<a href="http://www.lai18.com/content/407204.html" target="_blank" rel="external">http://www.lai18.com/content/407204.html</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文分别对Cookie与Session做一个介绍和总结，并分别对两个知识点进行对比分析，让大家对Cookie和Session有一个更深入的了解，并对自己的开发工作中灵活运用带来启示。</p>
<h2 id="cookie机制">cookie机制</h2><p>Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。IETF RFC 2965 HTTP State Management Mechanism 是通用cookie规范。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies 。<br>]]>
    
    </summary>
    
      <category term="web" scheme="http://yck.me/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello, 你好~]]></title>
    <link href="http://yck.me/2016/01/hello-world/"/>
    <id>http://yck.me/2016/01/hello-world/</id>
    <published>2016-01-21T14:00:00.000Z</published>
    <updated>2016-05-15T14:25:31.177Z</updated>
    <content type="html"><![CDATA[<p>欢迎来到我的博客。<br><a id="more"></a><br>从研究生入学起，我就就想试试看开个博客。然而作为一个拖延症晚期的患者，最近才真的着手开始干。。。</p>
<p>这个博客使用的是<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>静态博客框架。月初的时候想到在博客上放上一双眼睛，向下面那双宝石般晶莹剔透的猫眼。然而理想和现实总是相差太多。。。还想过添加一个音乐播放的小东西，但是这样的话又要考虑页面切换时的停顿。因此对于是否要做成网易云音乐那样异步加载纠结了好久。最后还是把这部分留作以后的工作了。 -_-||<br><img src="/img/Cat_eyes.jpg" alt="cat" title="cat"></p>
<p>博客的主题是<a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">Apllo</a>。自己稍微做了一点修改。然后博客的评论用的<a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a>。域名是暑假时申请的<a href="https://github.com/" target="_blank" rel="external">GitHub</a>的StudentPack里提供的<a href="https://www.namecheap.com/" target="_blank" rel="external">namecheap</a>的.me域名(又拖了半年。。。)。</p>
<p>哎呀，肚子里没有什么墨水。就写道这里了。以后会尽力多写一些，也请大家无聊的时候来看看有没有更新。</p>
<p>有问题和建议的话可以通过邮箱<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x69;&#x40;&#121;&#99;&#x6b;&#46;&#109;&#101;">&#x69;&#x40;&#121;&#99;&#x6b;&#46;&#109;&#101;</a>联系我。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>欢迎来到我的博客。<br>]]>
    
    </summary>
    
  </entry>
  
</feed>
